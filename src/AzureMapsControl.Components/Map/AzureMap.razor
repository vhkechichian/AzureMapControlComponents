@namespace AzureMapsControl.Map

@using AzureMapsControl.Atlas
@using AzureMapsControl.Configuration

@using Microsoft.JSInterop
@using Microsoft.Extensions.Options

@inject IOptions<AzureMapsConfiguration> Configuration
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject MapEventService MapEventService

<div id="@Id"></div>

@code {

    private const string MethodAddMap = "addMap";
    private const string MethodSetOptions = "setOptions";

    private MapEventInvokeHelper _mapEventInvokeHelper;

    /// <summary>
    /// If true the map will automatically resize whenever the window's size changes. Otherwise map.resize() must be called.
    /// Default true.
    /// </summary>
    [Parameter]
    public bool AutoResize { get; set; } = true;

    /// <summary>
    /// The bearing of the map (rotation).
    /// default: North
    /// </summary>
    [Parameter]
    public Bearing Bearing { get; set; } = Bearing.North;

    /// <summary>
    /// The bounds of the map control's camera
    /// </summary>
    [Parameter]
    public BoundingBox Bounds { get; set; }

    /// <summary>
    /// The type of animation.
    /// "jump" is an immediate change.
    /// "ease" is a gradual change of the camera's settings.
    /// "fly" is a gradual change of the camera's settings following an arc resembling flight.
    /// </summary>
    [Parameter]
    public CameraType CameryType { get; set; }

    /// <summary>
    /// The position to align the center of the map view with
    /// </summary>
    [Parameter]
    public Position Center { get; set; }

    /// <summary>
    /// A pixel offset to apply to the center of the map.
    /// This is useful if you want to programmatically pan the map to another location or if you want to center the map over a shape, then offset the maps view to make room for a popup.
    /// </summary>
    [Parameter]
    public Pixel CenterOffset { get; set; }

    /// <summary>
    /// Disable telemetry collection
    /// This option may only be set when initializing the map.
    /// default: false
    /// </summary>
    [Parameter]
    public bool DisableTelemetry { get; set; }

    /// <summary>
    /// The duration of the animation in milliseconds.
    /// </summary>
    [Parameter]
    public int? Duration { get; set; }

    /// <summary>
    /// Enable accessibility
    /// default: true
    /// </summary>
    [Parameter]
    public bool EnableAccessibility { get; set; } = true;

    /// <summary>
    /// The language of the map labels.
    /// </summary>
    [Parameter]
    public string Language { get; set; }

    /// <summary>
    /// Sets the lighting options of the map.
    /// </summary>
    [Parameter]
    public LightOptions Light { get; set; }

    /// <summary>
    /// Id affected to the div hosting the map
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// A bounding box in which to constrain the viewable map area to. Users won't be able to pan the center of the map outside of this bounding box. Set maxBounds to null or undefined to remove maxBounds
    /// </summary>
    [Parameter]
    public BoundingBox MaxBounds { get; set; }

    /// <summary>
    /// The maximum zoom level that the map can be zoomed into during the animation. Must be between 0 and 24, and greater than or equal to `minZoom`.
    /// </summary>
    [Parameter]
    public int? MaxZoom { get; set; }

    /// <summary>
    /// The minimum zoom level that the map can be zoomed out to during the animation. Must be between 0 and 24, and less than or equal to `maxZoom`.
    /// </summary>
    [Parameter]
    public int? MinZoom { get; set; }

    /// <summary>
    /// An offset of the center of the given bounds relative to the map's center, measured in pixels
    /// </summary>
    [Parameter]
    public Pixel Offset { get; set; }

    /// <summary>
    /// The amount of padding in pixels to add to the given bounds
    /// </summary>
    [Parameter]
    public Padding Padding { get; set; }

    /// <summary>
    /// The pitch (tilt) of the map in degrees between 0 and 60, where 0 is looking straight down on the map.
    /// </summary>
    [Parameter]
    public int? Pitch { get; set; }

    /// <summary>
    /// If true, the map's canvas can be exported to a PNG using map.getCanvas().toDataURL().
    /// </summary>
    [Parameter]
    public bool PreserveDrawingBuffer { get; set; }

    /// <summary>
    /// A boolean that specifies if vector and raster tiles should be reloaded when they expire (based on expires header).
    /// This is useful for data sets that update frequently. When set to false, each tile will be loaded once, when needed, and not reloaded when they expire.
    /// default: true
    /// <summary>
    [Parameter]
    public bool RefreshExpiredTiles { get; set; } = true;

    /// <summary>
    /// Specifies if multiple copies of the world should be rendered when zoomed out. Default true
    /// </summary>
    [Parameter]
    public bool RenderWorldCopies { get; set; } = true;

    /// <summary>
    /// Specifies if buildings will be rendered with their models. If false all buildings will be rendered as just their footprints
    /// </summary>
    [Parameter]
    public bool ShowBuildingModels { get; set; }

    /// <summary>
    /// Specifies if the feedback link should be displayed on the map or not. Default true
    /// </summary>
    [Parameter]
    public bool ShowFeedbackLink { get; set; } = true;

    /// <summary>
    /// Specifies if the Microsoft logo should be hidden or not. If set to true a Microsoft copyright string will be added to the map. Default true
    /// </summary>
    [Parameter]
    public bool ShowLogo { get; set; } = true;

    /// <summary>
    /// Specifies if the map should render an outline around each tile and the tile ID. These tile boundaries are useful for debugging. The uncompressed file size of the first vector source is drawn in the top left corner of each tile, next to the tile ID
    /// </summary>
    [Parameter]
    public bool ShowTilesBoundaries { get; set; }

    /// <summary>
    /// The name of the style to use when rendering the map
    /// </summary>
    [Parameter]
    public string Style { get; set; }

    /// <summary>
    /// Specifies which set of geopolitically disputed borders and labels are displayed on the map. The View parameter (also referred to as “user region parameter”) is a 2-letter ISO-3166 Country Code that will show the correct maps for that country/region. Country/Regions that are not on the View list or if unspecified will default to the “Unified” View
    /// </summary>
    [Parameter]
    public string View { get; set; }

    /// <summary>
    /// The zoom level of the map view
    /// </summary>
    [Parameter]
    public int? Zoom { get; set; }

    protected override void OnInitialized()
    {
        _mapEventInvokeHelper = new MapEventInvokeHelper(MapEventReceived);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync(MethodAddMap.ToAzureMapsControlNamespace(),
                Id,
                Configuration.Value.SubscriptionKey,
                new ServiceOptions
                {
                    DisableTelemetry = DisableTelemetry,
                    EnableAccessibility = EnableAccessibility,
                    RefreshExpiredTiles = RefreshExpiredTiles
                },
                DotNetObjectReference.Create(_mapEventInvokeHelper));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void MapEventReceived(MapEventArgs mapEvent)
    {
        if (mapEvent.Type == "ready")
        {
            JSRuntime.InvokeVoidAsync(MethodSetOptions.ToAzureMapsControlNamespace(),
                Id,
                new CameraOptions
                {
                    Bearing = (int?)Bearing,
                    CenterOffset = CenterOffset,
                    Duration = Duration,
                    MaxZoom = MaxZoom,
                    MinZoom = MinZoom,
                    Pitch = Pitch,
                    Type = CameryType?.ToString(),
                    Bounds = Bounds,
                    MaxBounds = Bounds != null ? MaxBounds : null,
                    Offset = Bounds != null ? Offset : null,
                    Padding = Bounds != null ? Padding : null,
                    Center = Bounds == null ? Center : null,
                    Zoom = Bounds == null ? Zoom : null
                },
                new StyleOptions {
                    AutoResize = AutoResize,
                    Language = Language,
                    Light = Light,
                    PreserveDrawingBuffer = PreserveDrawingBuffer,
                    RenderWorldCopies = RenderWorldCopies,
                    ShowBuildingModels = ShowBuildingModels,
                    ShowFeedbackLink = ShowFeedbackLink,
                    ShowLogo = ShowLogo,
                    ShowTileBoundaries = ShowTilesBoundaries,
                    Style = Style,
                    View = View
                });
        }
        mapEvent.MapId = Id;
        MapEventService.DispatchEvent(mapEvent);
    }
}