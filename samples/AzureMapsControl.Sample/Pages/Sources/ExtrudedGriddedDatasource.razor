@page "/Sources/ExtrudedGriddedDatasource"
@using AzureMapsControl.Components.Map
@inject IMapService MapService

<style>
    #legend {
        position: absolute;
        top: 1px;
        left: 5px;
        font-family: Arial;
        font-size: 12px;
        background-color: white;
        border-radius: 5px;
        padding: 5px;
        line-height: 20px;
    }

        #legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
        }
</style>

<AzureMap Id="map"
          EventActivationFlags="MapEventActivationFlags
                                .None()
                                .Enable(MapEventType.Ready, MapEventType.SourceAdded)"
          CameraOptions="CameraOptions"
          StyleOptions="StyleOptions"
          OnReady="OnMapReady"
          OnSourceAdded="OnSourceAdded" />

<div id="legend">
    <b>Addresses per cell</b><br />
    <div id="legendColors"><i style="background:#ffffb2"></i> 1 - 100<br><i style="background:#fecc5c"></i> 100 - 200<br><i style="background:#fd8d3c"></i> 200 - 300<br><i style="background:#f03b20"></i> 300 - 400<br><i style="background:#bd0026"></i> 400+</div><br />
    <b>Grid type:</b><br />
    <select @onchange="ChangeGridType">
        <option value="@Components.Data.Grid.GridType.Circle.ToString()">Circle</option>
        <option selected="selected" value="@Components.Data.Grid.GridType.Hexagon.ToString()">Hexagon</option>
        <option value="@Components.Data.Grid.GridType.HexCircle.ToString()">Hex Circle</option>
        <option value="@Components.Data.Grid.GridType.PointyHexagon.ToString()">Pointy Hexagon</option>
        <option value="@Components.Data.Grid.GridType.Square.ToString()">Square</option>
        <option value="@Components.Data.Grid.GridType.Triangle.ToString()">Triangle</option>
    </select>
</div>

@code {
    private readonly string _datasourceId = "datasourceId";

    public CameraOptions CameraOptions = new CameraOptions { Center = new AzureMapsControl.Components.Atlas.Position(-105.03, 40.54), Zoom = 11, Pitch = 45 };

    public StyleOptions StyleOptions = new StyleOptions { Style = MapStyle.GrayscaleDark };

    public async Task OnMapReady(MapEventArgs eventArgs)
    {
        var source = new Components.Data.Grid.GriddedDataSource(_datasourceId)
            {
                Options = new Components.Data.Grid.GriddedDataSourceOptions
                {
                    CellWidth = 0.25,
                    DistanceUnits = Components.Atlas.Math.DistanceUnits.Miles,
                    Coverage = 0.8,
                    CenterLatitude = 40.54,
                    GridType = Components.Data.Grid.GridType.Hexagon
                }
            };
        await eventArgs.Map.AddSourceAsync(source);

        await source.ImportDataFromUrlAsync("https://azuremapscodesamples.azurewebsites.net/Common/data/geojson/address.json");
    }

    public async Task OnSourceAdded(MapSourceEventArgs eventArgs)
    {
        var steppedExpJsonString = "[\"step\", [\"get\", \"point_count\"], \"#ffffb2\", 100, \"#fecc5c\", 200, \"#fd8d3c\", 300, \"#f03b20\", 400, \"#bd0026\"]";
        var heightExp = "[\"interpolate\", [\"linear\"], [\"get\", \"point_count\"], 1, 10, 1000, 5000]";
        var filterExp = "[\"==\", [\"get\", \"cell_id\"], \"\"]";

        var polygonHoverLayer = new Components.Layers.PolygonExtrusionLayer
            {
                Options = new Components.Layers.PolygonExtrusionLayerOptions
                {
                    Source = _datasourceId,
                    FillColor = new Components.Atlas.ExpressionOrString(System.Text.Json.JsonDocument.Parse(steppedExpJsonString)),
                    FillOpacity = 1,
                    Height = new Components.Atlas.ExpressionOrNumber(System.Text.Json.JsonDocument.Parse(heightExp)),
                    Filter = new Components.Atlas.Expression(System.Text.Json.JsonDocument.Parse(filterExp))
                }
            };

        var polygonLayer = new Components.Layers.PolygonExtrusionLayer
            {
                EventActivationFlags = Components.Layers.LayerEventActivationFlags.None().Enable(Components.Layers.LayerEventType.Click),
                Options = new Components.Layers.PolygonExtrusionLayerOptions
                {
                    Source = _datasourceId,
                    FillColor = new Components.Atlas.ExpressionOrString(System.Text.Json.JsonDocument.Parse(steppedExpJsonString)),
                    FillOpacity = 0.8,
                    Height = new Components.Atlas.ExpressionOrNumber(System.Text.Json.JsonDocument.Parse(heightExp))
                }
            };

        polygonLayer.OnClick += async clickEvent =>
        {
            var cellId = clickEvent.Shapes.First().Properties["cell_id"];
            await polygonHoverLayer.SetOptionsAsync(options => options.Filter = new Components.Atlas.Expression(
                    System.Text.Json.JsonDocument.Parse($"[\"==\", [\"get\", \"cell_id\"], \"{cellId}\"]")
                ));
        };

        await eventArgs.Map.AddLayerAsync(polygonLayer, "labels");
        await eventArgs.Map.AddLayerAsync(polygonHoverLayer, "labels");
    }

    public async Task ChangeGridType(ChangeEventArgs eventArgs)
    {
        var datasource = MapService
            .Map
            .Sources
            .First(source => source.Id == _datasourceId) as Components.Data.Grid.GriddedDataSource;

        await datasource.SetOptionsAsync(options => options.GridType = Components.Data.Grid.GridType.FromString(eventArgs.Value.ToString()));
    }

}