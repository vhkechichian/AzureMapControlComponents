@page "/Popups/PopupOnReady"

@using AzureMapsControl.Components.Map
<AzureMap Id="map"
          CameraOptions="new CameraOptions { Center= new AzureMapsControl.Components.Atlas.Position(-122.1333, 47.63), Zoom = 12}"
          EventActivationFlags="MapEventActivationFlags
                                .None()
                                .Enable(MapEventType.Ready)"
          OnReady="OnMapReady"/>

<style>
    /* CSS styles used by custom popup template */
.customInfobox {
            max-width: 240px;
            padding: 10px;
            font-size: 12px;
        }

.customInfobox .name {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 5px;
            }
</style>

@code  {

    public async Task OnMapReady(MapEventArgs eventArgs)
    {
        var popupTemplate = "<div class=\"customInfobox\"><div class=\"name\">{name}</div>{description}</div>";
        var datasource = new Components.Data.DataSource();
        await eventArgs.Map.AddSourceAsync(datasource);

        var feature = new Components.Atlas.Feature<Components.Atlas.Point>(new Components.Atlas.Point(new Components.Atlas.Position(-122.1333, 47.63)), 
        new Dictionary<string, object> {
            { "name", "Microsoft Building 41" },
            { "description", "15571 NE 31st St, Redmond, WA 98052"}
        });

        await datasource.AddAsync(feature);

        var symbolLayer = new Components.Layers.SymbolLayer {
            Options = new Components.Layers.SymbolLayerOptions {
                Source = datasource.Id
            },
            EventActivationFlags = Components.Layers.LayerEventActivationFlags.None().Enable(Components.Layers.LayerEventType.MouseOver, Components.Layers.LayerEventType.MouseLeave)
        };

        await eventArgs.Map.AddLayerAsync(symbolLayer);

        var popup = new Components.Popups.Popup(new Components.Popups.PopupOptions {
            PixelOffset = new Components.Atlas.Pixel(0, -18),
            CloseButton = false
        });

        await eventArgs.Map.AddPopupAsync(popup);

        symbolLayer.OnMouseOver += async mouseOverEventArgs => {
            if(mouseOverEventArgs.Shapes.Count() > 0)
            {
                var shape = mouseOverEventArgs.Shapes.First();

                await popup.SetOptionsAsync(options => {
                    options.Content = popupTemplate
                                .Replace("{name}", shape.Properties["name"].ToString())
                                .Replace("{description}", shape.Properties["description"].ToString());
                    options.Position = (shape.Geometry as Components.Atlas.Point).Coordinates;
                });
                await popup.OpenAsync();
            }
        };

        symbolLayer.OnMouseLeave += async _ => {
            await popup.CloseAsync();
        };
    }

}