@page "/Animations/MoveAlongPath"
@inject Components.Animations.IAnimationService AnimationService

<style>
    .animations-btns {
        position: absolute;
        z-index: 1000;
        left: 0;
        top: 0;
    }
</style>

@using AzureMapsControl.Components.Map
@using AzureMapsControl.Sample.Animations
<AnimationBar OnDispose="DisposeAsync"
              OnPause="PauseAsync"
              OnPlay="PlayAsync"
              OnReset="ResetAsync"
              OnSeek="SeekAsync"
              OnStop="StopAsync"></AnimationBar>
<AzureMap Id="map"
          CameraOptions="new CameraOptions { Center = new Components.Atlas.Position(-122.345, 47.615), Zoom = 14 }"
          StyleOptions="StyleOptions"
          EventActivationFlags="MapEventActivationFlags
                                .None()
                                .Enable(MapEventType.Ready)"
          OnReady="OnMapReady" />

@code  {
    private Components.Animations.IMoveAlongPathAnimation _animation;

    public StyleOptions StyleOptions = new StyleOptions
    {
        Style = MapStyle.GrayscaleDark
    };

    public async Task DisposeAsync()
    {
        if (_animation is not null)
        {
            await _animation.DisposeAsync();
        }
    }

    public async Task PauseAsync()
    {
        if (_animation is not null)
        {
            await _animation.PauseAsync();
        }
    }

    public async Task PlayAsync()
    {
        if (_animation is not null)
        {
            await _animation.PlayAsync();
        }
    }

    public async Task ResetAsync()
    {
        if (_animation is not null)
        {
            await _animation.ResetAsync();
        }
    }

    public async Task SeekAsync()
    {
        if (_animation is not null)
        {
            await _animation.SeekAsync(0.5m);
        }
    }

    public async Task StopAsync()
    {
        if (_animation is not null)
        {
            await _animation.StopAsync();
        }
    }

    public async Task OnMapReady(MapEventArgs eventArgs)
    {
        await eventArgs.Map.CreateImageFromTemplateAsync("arrow-icon", "marker-arrow", "teal", "#fff");
        var lineSource = new AzureMapsControl.Components.Data.DataSource();
        var pinSource = new AzureMapsControl.Components.Data.DataSource();

        await eventArgs.Map.AddSourceAsync(lineSource);
        await eventArgs.Map.AddSourceAsync(pinSource);

        var lineLayer = new AzureMapsControl.Components.Layers.LineLayer
        {
            Options = new Components.Layers.LineLayerOptions
            {
                Source = lineSource.Id,
                StrokeColor = new Components.Atlas.ExpressionOrString("DodgerBlue"),
                StrokeWidth = new Components.Atlas.ExpressionOrNumber(3)
            }
        };

        await eventArgs.Map.AddLayerAsync(lineLayer);
        var line = new AzureMapsControl.Components.Atlas.LineString(new[]
        {
            new AzureMapsControl.Components.Atlas.Position(-122.34758, 47.62155),
            new AzureMapsControl.Components.Atlas.Position(-122.34764, 47.61859),
            new AzureMapsControl.Components.Atlas.Position(-122.33787, 47.61295),
            new AzureMapsControl.Components.Atlas.Position(-122.34217, 47.60964)
        });
        await lineSource.AddAsync(line);

        var symbolLayer = new AzureMapsControl.Components.Layers.SymbolLayer
        {
            Options = new Components.Layers.SymbolLayerOptions
            {
                Source = pinSource.Id,
                IconOptions = new Components.Layers.IconOptions
                {
                    Image = new Components.Atlas.ExpressionOrString("arrow-icon"),
                    Anchor = new Components.Atlas.ExpressionOrString("center"),
                    Rotation = new Components.Atlas.ExpressionOrNumber(new AzureMapsControl.Components.Atlas.Expression[]
                    {
                        new AzureMapsControl.Components.Atlas.ExpressionOrString("+"),
                        new AzureMapsControl.Components.Atlas.ExpressionOrNumber(180),
                        new Components.Atlas.Expression(new AzureMapsControl.Components.Atlas.Expression[]
                    {
                            new AzureMapsControl.Components.Atlas.ExpressionOrString("get"),
                            new AzureMapsControl.Components.Atlas.ExpressionOrString("heading")
                        })
                        }),
                    RotationAlignment = AzureMapsControl.Components.Atlas.PitchAlignment.Map,
                    IgnorePlacement = true,
                    AllowOverlap = true
                },
                TextOptions = new Components.Layers.TextOptions
                {
                    IgnorePlacement = true,
                    AllowOverlap = true
                }
            }
        };
        await eventArgs.Map.AddLayerAsync(symbolLayer);

        var pin = new AzureMapsControl.Components.Atlas.Point(new Components.Atlas.Position(-122.34758, 47.62155));
        await pinSource.AddAsync(pin);

        _animation = await AnimationService.MoveAlongPathAsync(line, lineSource, pin, pinSource, new Components.Animations.MoveAlongPathAnimationOptions
        {
            CaptureMetadata = true,
            Duration = 4000,
            RotationOffset = 0,
            Zoom = 15,
            Pitch = 45,
            Rotate = true
        });
    }
}