@page "/Animations/MoveMarkerAlongPath"
@inject Components.Animations.IAnimationService AnimationService

@using AzureMapsControl.Components.Map
@using AzureMapsControl.Sample.Animations
<AnimationBar OnDispose="DisposeAsync"
              OnPause="PauseAsync"
              OnPlay="PlayAsync"
              OnReset="ResetAsync"
              OnSeek="SeekAsync"
              OnStop="StopAsync"></AnimationBar>
<AzureMap Id="map"
          CameraOptions="new CameraOptions { Center = new Components.Atlas.Position(-122.3378, 47.6129), Zoom = 13 }"
          StyleOptions="StyleOptions"
          EventActivationFlags="MapEventActivationFlags
                                .None()
                                .Enable(MapEventType.Ready)"
          OnReady="OnMapReady" />

@code  {
    private Components.Animations.IMoveAlongPathAnimation _animation;

    public StyleOptions StyleOptions = new StyleOptions
    {
        Style = MapStyle.GrayscaleDark
    };

    public async Task DisposeAsync()
    {
        if (_animation is not null)
        {
            await _animation.DisposeAsync();
        }
    }

    public async Task PauseAsync()
    {
        if (_animation is not null)
        {
            await _animation.PauseAsync();
        }
    }

    public async Task PlayAsync()
    {
        if (_animation is not null)
        {
            await _animation.PlayAsync();
        }
    }

    public async Task ResetAsync()
    {
        if (_animation is not null)
        {
            await _animation.ResetAsync();
        }
    }

    public async Task SeekAsync()
    {
        if (_animation is not null)
        {
            await _animation.SeekAsync(0.5m);
        }
    }

    public async Task StopAsync()
    {
        if (_animation is not null)
        {
            await _animation.StopAsync();
        }
    }

    public async Task OnMapReady(MapEventArgs eventArgs)
    {
        var lineSource = new AzureMapsControl.Components.Data.DataSource();

        await eventArgs.Map.AddSourceAsync(lineSource);

        var lineLayer = new AzureMapsControl.Components.Layers.LineLayer
        {
            Options = new Components.Layers.LineLayerOptions
            {
                Source = lineSource.Id,
                StrokeColor = new Components.Atlas.ExpressionOrString("DodgerBlue"),
                StrokeWidth = new Components.Atlas.ExpressionOrNumber(3)
            }
        };

        await eventArgs.Map.AddLayerAsync(lineLayer);
        var line = new AzureMapsControl.Components.Atlas.LineString(new[]
        {
            new AzureMapsControl.Components.Atlas.Position(-122.34758, 47.62155),
            new AzureMapsControl.Components.Atlas.Position(-122.34764, 47.61859),
            new AzureMapsControl.Components.Atlas.Position(-122.33787, 47.61295),
            new AzureMapsControl.Components.Atlas.Position(-122.34217, 47.60964)
        });
        await lineSource.AddAsync(new AzureMapsControl.Components.Atlas.Shape<AzureMapsControl.Components.Atlas.LineString>(line));

        var marker = new AzureMapsControl.Components.Markers.HtmlMarker(
            new Components.Markers.HtmlMarkerOptions
            {
                Position = new Components.Atlas.Position(-122.33825, 47.53945)
            }
        );

        await eventArgs.Map.AddHtmlMarkersAsync(marker);

        _animation = await AnimationService.MoveAlongPathAsync(line, lineSource, marker, new Components.Animations.Options.MoveAlongPathAnimationOptions
        {
            CaptureMetadata = true,
            Duration = 2000
        });
    }
}